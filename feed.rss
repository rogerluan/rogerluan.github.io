<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Roger Oba</title><description></description><link>https://roger.ml</link><language>en</language><lastBuildDate>Tue, 16 Mar 2021 23:53:09 -0300</lastBuildDate><pubDate>Tue, 16 Mar 2021 23:53:09 -0300</pubDate><ttl>250</ttl><atom:link href="https://roger.ml/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://roger.ml/posts/test-css</guid><title>Markdown cheatsheet</title><description></description><link>https://roger.ml/posts/test-css</link><pubDate>Tue, 16 Mar 2021 23:53:07 -0300</pubDate><content:encoded><![CDATA[<h1>Markdown cheatsheet</h1><p><em>(Also see <a href="">remarkable</a>, the markdown parser created by the author of this cheatsheet)</em></p><h2>Table of contents</h2><ul><li><a href="#standard-features">Standard features</a><ul><li><a href="#headings">Headings</a></li><li><a href="#paragraphs">Paragraphs</a></li><li><a href="#breaks">Breaks</a></li><li><a href="#horizontal-rule">Horizontal Rule</a></li><li><a href="#emphasis">Emphasis</a><ul><li><a href="#bold">Bold</a></li><li><a href="#italics">Italics</a></li></ul></li><li><a href="#blockquotes">Blockquotes</a></li><li><a href="#lists">Lists</a><ul><li><a href="#unordered">Unordered</a></li><li><a href="#ordered">Ordered</a></li><li><a href="#time-saving-tip">Time-saving Tip</a></li></ul></li><li><a href="#code">Code</a><ul><li><a href="#inline-code">Inline code</a></li><li><a href="#fenced-code-block">"Fenced" code block</a></li><li><a href="#indented-code">Indented code</a></li><li><a href="#syntax-highlighting">Syntax highlighting</a></li></ul></li><li><a href="#links">Links</a><ul><li><a href="#autolinks">Autolinks</a></li><li><a href="#inline-links">Inline links</a></li><li><a href="#link-titles">Link titles</a></li><li><a href="#named-anchors">Named Anchors</a></li></ul></li><li><a href="#images">Images</a></li><li><a href="#raw-html">Raw HTML</a></li><li><a href="#escaping-with-backslashes">Escaping with backslashes</a></li></ul></li><li><a href="#non-standard-features">Non-standard features</a><ul><li><a href="#strikethrough">Strikethrough</a></li><li><a href="#todo-list">Todo List</a></li><li><a href="#tables">Tables</a><ul><li><a href="#aligning-cells">Aligning cells</a></li></ul></li><li><a href="#footnotes">Footnotes</a><ul><li><a href="#inline-footnotes">Inline footnotes</a></li></ul></li><li><a href="#additional-information">Additional Information</a><ul><li><a href="#what-is-markdown">What is markdown?</a></li><li><a href="#other-resources">Other Resources</a></li><li><a href="#contributing">Contributing</a></li></ul></li></ul></li></ul><h1>Standard features</h1><pre><code><span class="keyword">import</span> Foundation
<span class="keyword">import</span> Publish
<span class="keyword">import</span> Plot
<span class="keyword">import</span> SplashPublishPlugin
<span class="keyword">import</span> Ink

<span class="comment">// This type acts as the configuration for your website.</span>
<span class="keyword">struct</span> RogerMl: <span class="type">Website</span> {
    <span class="keyword">enum</span> SectionID: <span class="type">String</span>, <span class="type">WebsiteSectionID</span> {
        <span class="comment">// Add the sections that you want your website to contain here:</span>
        <span class="keyword">case</span> posts
        <span class="keyword">case</span> about = <span class="string">"About"</span>
        <span class="keyword">case</span> contact = <span class="string">"Contact"</span>
    }

    <span class="keyword">struct</span> ItemMetadata: <span class="type">WebsiteItemMetadata</span> {
        <span class="comment">// Add any site-specific metadata that you want to use here.</span>
    }

    <span class="comment">// Update these properties to configure your website:</span>
    <span class="keyword">var</span> url = <span class="type">URL</span>(string: <span class="string">"https://roger.ml"</span>)!
    <span class="keyword">var</span> name = <span class="string">"Roger Oba"</span>
    <span class="keyword">var</span> description = <span class="string">""</span>
    <span class="keyword">var</span> language: <span class="type">Language</span> { .<span class="dotAccess">english</span> }
    <span class="keyword">var</span> imagePath: <span class="type">Path</span>? { <span class="keyword">nil</span> }
    <span class="keyword">var</span> favicon: <span class="type">Favicon</span>? { <span class="type">Favicon</span>(path: <span class="string">"favicon.svg"</span>, type: <span class="string">"image/svg+xml"</span>) }
}

<span class="comment">// This will generate your website using the built-in Foundation theme:</span>
<span class="keyword">try</span> <span class="type">RogerMl</span>().<span class="call">publish</span>(
    withTheme: .<span class="dotAccess">roger</span>,
    indentation: .<span class="call">spaces</span>(<span class="number">4</span>),
<span class="comment">//    at: Path.,</span>
    deployedUsing: .<span class="call">gitHub</span>(<span class="string">"rogerluan/rogerluan.github.io"</span>),
    additionalSteps: [
        .<span class="call">step</span>(named: <span class="string">"Create 'about' Page"</span>) { context <span class="keyword">in
            let</span> about = <span class="keyword">try</span> context.<span class="call">file</span>(at: <span class="string">"/Content/about/index.md"</span>)
            <span class="keyword">let</span> page = <span class="keyword">try</span> context.<span class="call">makeMarkdownContentFactory</span>().<span class="call">makePage</span>(fromFile: about, at: <span class="string">"/about"</span>)
            context.<span class="call">addPage</span>(page)
        },
        .<span class="call">step</span>(named: <span class="string">"Create 'contact' Page"</span>) { context <span class="keyword">in
            let</span> about = <span class="keyword">try</span> context.<span class="call">file</span>(at: <span class="string">"/Content/contact/index.md"</span>)
            <span class="keyword">let</span> page = <span class="keyword">try</span> context.<span class="call">makeMarkdownContentFactory</span>().<span class="call">makePage</span>(fromFile: about, at: <span class="string">"/contact"</span>)
            context.<span class="call">addPage</span>(page)
        },
    ],
    plugins: [ .<span class="call">splash</span>(withClassPrefix: <span class="string">""</span>) ]
)
</code></pre><p>The following markdown features are defined by the <a href="">CommonMark</a> standard, and are generally supported by all markdown parsers and editors.</p><h2>Headings</h2><p>Headings from <code>h1</code> through <code>h6</code> are constructed with a <code>#</code> for each level:</p><pre><code># h1 <span class="type">Heading</span>
## h2 <span class="type">Heading</span>
### h3 <span class="type">Heading</span>
#### h4 <span class="type">Heading</span>
##### h5 <span class="type">Heading</span>
###### h6 <span class="type">Heading</span>
</code></pre><p>Renders to this HTML:</p><pre><code>&lt;h1&gt;h1 <span class="type">Heading</span>&lt;/h1&gt;
&lt;h2&gt;h2 <span class="type">Heading</span>&lt;/h2&gt;
&lt;h3&gt;h3 <span class="type">Heading</span>&lt;/h3&gt;
&lt;h4&gt;h4 <span class="type">Heading</span>&lt;/h4&gt;
&lt;h5&gt;h5 <span class="type">Heading</span>&lt;/h5&gt;
&lt;h6&gt;h6 <span class="type">Heading</span>&lt;/h6&gt;
</code></pre><p>Which looks like this in the browser:</p><h1>h1 Heading</h1><h2>h2 Heading</h2><h3>h3 Heading</h3><h4>h4 Heading</h4><h5>h5 Heading</h5><h6>h6 Heading</h6><p><strong>A note about "Setext" Headings</strong></p><p>Note that this document only describes <a href="https://spec.commonmark.org/0.28/#atx-headings">ATX headings</a>, as it is the preferred syntax for writing headings. However, the CommonMark specification also describes <a href="https://spec.commonmark.org/0.28/#setext-headings">Setext headings</a>, a heading format that is denoted by a line of dashes or equal signes following the heading. It's recommended by the author of this guide that you use only ATX headings, as they are easier to write and read in text editors, and are less likeley to conflict with other syntaxes and demarcations from language extensions.</p><h2>Paragraphs</h2><p>Body copy written as normal plain-text will be wrapped with <code>&lt;p&gt;&lt;/p&gt;</code> tags in the rendered HTML.</p><p>So this:</p><pre><code><span class="type">Lorem</span> ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. <span class="type">Et</span> legere ocurreret pri, animal tacimates complectitur ad cum. <span class="type">Cu</span> eum inermis inimicus efficiendi. <span class="type">Labore</span> officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.
</code></pre><p>Renders to this HTML:</p><pre><code>&lt;p&gt;<span class="type">Lorem</span> ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. <span class="type">Et</span> legere ocurreret pri, animal tacimates complectitur ad cum. <span class="type">Cu</span> eum inermis inimicus efficiendi. <span class="type">Labore</span> officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.&lt;/p&gt;
</code></pre><h2>Breaks</h2><p>You can use multiple consecutive newline characters (<code>\n</code>) to create extra spacing between sections in a markdown document. However, if you need to ensure that extra newlines are not collapsed, you can use as many HTML <code>&lt;br&gt;</code> elements as you want.</p><h2>Horizontal Rule</h2><p>The HTML <code>&lt;hr&gt;</code> element is for creating a "thematic break" between paragraph-level elements. In markdown, you can use of the following for this purpose:</p><ul><li><code>___</code>: three consecutive underscores</li><li><code>---</code>: three consecutive dashes</li><li><code>***</code>: three consecutive asterisks</li></ul><p>Renders to:</p><p>___</p><hr><hr><h2>Emphasis</h2><h3>Bold</h3><p>For emphasizing a snippet of text with a heavier font-weight.</p><p>The following snippet of text is <strong>rendered as bold text</strong>.</p><pre><code>**rendered <span class="keyword">as</span> bold text**
</code></pre><p>renders to:</p><p><strong>rendered as bold text</strong></p><p>and this HTML</p><pre><code>&lt;strong&gt;rendered <span class="keyword">as</span> bold text&lt;/strong&gt;
</code></pre><h3>Italics</h3><p>For emphasizing a snippet of text with italics.</p><p>The following snippet of text is <em>rendered as italicized text</em>.</p><pre><code>_rendered <span class="keyword">as</span> italicized text_
</code></pre><p>renders to:</p><p><em>rendered as italicized text</em></p><p>and this HTML:</p><pre><code>&lt;em&gt;rendered <span class="keyword">as</span> italicized text&lt;/em&gt;
</code></pre><h2>Blockquotes</h2><p>Used for defining a section of quoting text from another source, within your document.</p><p>To create a blockquote, use <code>&gt;</code> before any text you want to quote.</p><pre><code>&gt; <span class="type">Lorem</span> ipsum dolor sit amet, consectetur adipiscing elit. <span class="type">Integer</span> posuere erat a ante
</code></pre><p>Renders to:</p><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.</p></blockquote><p>And the generated HTML from a markdown parser might look something like this:</p><pre><code>&lt;blockquote&gt;
  &lt;p&gt;<span class="type">Lorem</span> ipsum dolor sit amet, consectetur adipiscing elit. <span class="type">Integer</span> posuere erat a ante.&lt;/p&gt;
&lt;/blockquote&gt;
</code></pre><p>Blockquotes can also be nested:</p><pre><code>&gt; <span class="type">Donec</span> massa lacus, ultricies a ullamcorper <span class="keyword">in</span>, fermentum sed augue.
<span class="type">Nunc</span> augue augue, aliquam non hendrerit ac, commodo vel nisi.
&gt;&gt; <span class="type">Sed</span> adipiscing elit vitae augue consectetur a gravida nunc vehicula. <span class="type">Donec</span> auctor
odio non est accumsan facilisis. <span class="type">Aliquam</span> id turpis <span class="keyword">in</span> dolor tincidunt mollis ac eu diam.
&gt;&gt;&gt; <span class="type">Donec</span> massa lacus, ultricies a ullamcorper <span class="keyword">in</span>, fermentum sed augue.
<span class="type">Nunc</span> augue augue, aliquam non hendrerit ac, commodo vel nisi.
</code></pre><p>Renders to:</p><blockquote><p>Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue.Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi.&gt; Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctorodio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam.&gt;&gt; Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue.Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi.</p></blockquote><h2>Lists</h2><h3>Unordered Lists</h3><p>A list of items in which the order of the items does not explicitly matter.</p><p>You may use any of the following symbols to denote bullets for each list item:</p><pre><code>* valid bullet
- valid bullet
+ valid bullet
</code></pre><p>For example</p><pre><code>+ <span class="type">Lorem</span> ipsum dolor sit amet
+ <span class="type">Consectetur</span> adipiscing elit
+ <span class="type">Integer</span> molestie lorem at massa
+ <span class="type">Facilisis</span> <span class="keyword">in</span> pretium nisl aliquet
+ <span class="type">Nulla</span> volutpat aliquam velit
  - <span class="type">Phasellus</span> iaculis neque
  - <span class="type">Purus</span> sodales ultricies
  - <span class="type">Vestibulum</span> laoreet porttitor sem
  - <span class="type">Ac</span> tristique libero volutpat at
+ <span class="type">Faucibus</span> porta lacus fringilla vel
+ <span class="type">Aenean</span> sit amet erat nunc
+ <span class="type">Eget</span> porttitor lorem
</code></pre><p>Renders to:</p><ul><li>Lorem ipsum dolor sit amet</li><li>Consectetur adipiscing elit</li><li>Integer molestie lorem at massa</li><li>Facilisis in pretium nisl aliquet</li><li>Nulla volutpat aliquam velit<ul><li>Phasellus iaculis neque</li><li>Purus sodales ultricies</li><li>Vestibulum laoreet porttitor sem</li><li>Ac tristique libero volutpat at</li></ul></li><li>Faucibus porta lacus fringilla vel</li><li>Aenean sit amet erat nunc</li><li>Eget porttitor lorem</li></ul><p>And this HTML</p><pre><code>&lt;ul&gt;
  &lt;li&gt;<span class="type">Lorem</span> ipsum dolor sit amet&lt;/li&gt;
  &lt;li&gt;<span class="type">Consectetur</span> adipiscing elit&lt;/li&gt;
  &lt;li&gt;<span class="type">Integer</span> molestie lorem at massa&lt;/li&gt;
  &lt;li&gt;<span class="type">Facilisis</span> <span class="keyword">in</span> pretium nisl aliquet&lt;/li&gt;
  &lt;li&gt;<span class="type">Nulla</span> volutpat aliquam velit
    &lt;ul&gt;
      &lt;li&gt;<span class="type">Phasellus</span> iaculis neque&lt;/li&gt;
      &lt;li&gt;<span class="type">Purus</span> sodales ultricies&lt;/li&gt;
      &lt;li&gt;<span class="type">Vestibulum</span> laoreet porttitor sem&lt;/li&gt;
      &lt;li&gt;<span class="type">Ac</span> tristique libero volutpat at&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;<span class="type">Faucibus</span> porta lacus fringilla vel&lt;/li&gt;
  &lt;li&gt;<span class="type">Aenean</span> sit amet erat nunc&lt;/li&gt;
  &lt;li&gt;<span class="type">Eget</span> porttitor lorem&lt;/li&gt;
&lt;/ul&gt;
</code></pre><h3>Ordered Lists</h3><p>A list of items in which the order of items does explicitly matter.</p><pre><code><span class="number">1</span>. <span class="type">Lorem</span> ipsum dolor sit amet
<span class="number">2</span>. <span class="type">Consectetur</span> adipiscing elit
<span class="number">3</span>. <span class="type">Integer</span> molestie lorem at massa
<span class="number">4</span>. <span class="type">Facilisis</span> <span class="keyword">in</span> pretium nisl aliquet
<span class="number">5</span>. <span class="type">Nulla</span> volutpat aliquam velit
<span class="number">6</span>. <span class="type">Faucibus</span> porta lacus fringilla vel
<span class="number">7</span>. <span class="type">Aenean</span> sit amet erat nunc
<span class="number">8</span>. <span class="type">Eget</span> porttitor lorem
</code></pre><p>Renders to:</p><ol><li>Lorem ipsum dolor sit amet</li><li>Consectetur adipiscing elit</li><li>Integer molestie lorem at massa</li><li>Facilisis in pretium nisl aliquet</li><li>Nulla volutpat aliquam velit</li><li>Faucibus porta lacus fringilla vel</li><li>Aenean sit amet erat nunc</li><li>Eget porttitor lorem</li></ol><p>And this HTML:</p><pre><code>&lt;ol&gt;
  &lt;li&gt;<span class="type">Lorem</span> ipsum dolor sit amet&lt;/li&gt;
  &lt;li&gt;<span class="type">Consectetur</span> adipiscing elit&lt;/li&gt;
  &lt;li&gt;<span class="type">Integer</span> molestie lorem at massa&lt;/li&gt;
  &lt;li&gt;<span class="type">Facilisis</span> <span class="keyword">in</span> pretium nisl aliquet&lt;/li&gt;
  &lt;li&gt;<span class="type">Nulla</span> volutpat aliquam velit&lt;/li&gt;
  &lt;li&gt;<span class="type">Faucibus</span> porta lacus fringilla vel&lt;/li&gt;
  &lt;li&gt;<span class="type">Aenean</span> sit amet erat nunc&lt;/li&gt;
  &lt;li&gt;<span class="type">Eget</span> porttitor lorem&lt;/li&gt;
&lt;/ol&gt;
</code></pre><h3>Time-saving Tip!</h3><p>Sometimes lists change, and when they do it's a pain to re-order all of the numbers. Markdown solves this problem by allowing you to simply use <code>1.</code> before each item in the list.</p><p>For example:</p><pre><code><span class="number">1</span>. <span class="type">Lorem</span> ipsum dolor sit amet
<span class="number">1</span>. <span class="type">Consectetur</span> adipiscing elit
<span class="number">1</span>. <span class="type">Integer</span> molestie lorem at massa
<span class="number">1</span>. <span class="type">Facilisis</span> <span class="keyword">in</span> pretium nisl aliquet
<span class="number">1</span>. <span class="type">Nulla</span> volutpat aliquam velit
<span class="number">1</span>. <span class="type">Faucibus</span> porta lacus fringilla vel
<span class="number">1</span>. <span class="type">Aenean</span> sit amet erat nunc
<span class="number">1</span>. <span class="type">Eget</span> porttitor lorem
</code></pre><p>Automatically re-numbers the items and renders to:</p><ol><li>Lorem ipsum dolor sit amet</li><li>Consectetur adipiscing elit</li><li>Integer molestie lorem at massa</li><li>Facilisis in pretium nisl aliquet</li><li>Nulla volutpat aliquam velit</li><li>Faucibus porta lacus fringilla vel</li><li>Aenean sit amet erat nunc</li><li>Eget porttitor lorem</li></ol><h2>Code</h2><h3>Inline code</h3><p>Wrap inline snippets of code with a single backtick: <code>`</code>.</p><p>For example, to show <code>&lt;div&gt;&lt;/div&gt;</code> inline with other text, just wrap it in backticks.</p><pre><code><span class="type">For</span> example, to show `&lt;div&gt;&lt;/div&gt;` inline with other text, just wrap it <span class="keyword">in</span> backticks.
</code></pre><h3>"Fenced" code block</h3><p>Three consecutive backticks, referred to as "code fences", are used to denote multiple lines of code: <code>```</code>.</p><p>For example, this:</p><pre>
```html
Example text here...
```
</pre><p>Renders to something like this in HTML:</p><pre><code>&lt;pre&gt;
  &lt;p&gt;<span class="type">Example</span> text here...&lt;/p&gt;
&lt;/pre&gt;
</code></pre><p>And appears like this when viewed in a browser:</p><pre><code><span class="type">Example</span> text here...
</code></pre><h3>Indented code</h3><p>You may also indent several lines of code by at least four spaces, but this is not recommended as it is harder to read, harder to maintain, and doesn't support syntax highlighting.</p><p>Example:</p><pre><code>     <span class="comment">// Some comments</span>
    line <span class="number">1</span> of code
    line <span class="number">2</span> of code
    line <span class="number">3</span> of code
</code></pre><p>// Some comments line 1 of code line 2 of code line 3 of code</p><h3>Syntax highlighting</h3><p>Various markdown parsers, such as <a href="https://github.com/jonschlinkert/remarkable">remarkable</a>, support syntax highlighting with fenced code blocks. To activate the correct styling for the language inside the code block, simply add the file extension of the language you want to use directly after the first code "fence": <code>```js</code>, and syntax highlighting will automatically be applied in the rendered HTML (if supported by the parser). For example, to apply syntax highlighting to JavaScript code:</p><pre>
```js
grunt.initConfig({
  assemble: {
    options: {
      assets: 'docs/assets',
      data: 'src/data/*.{json,yml}',
      helpers: 'src/custom-helpers.js',
      partials: ['src/partials/**/*.{hbs,md}']
    },
    pages: {
      options: {
        layout: 'default.hbs'
      },
      files: {
        './': ['src/templates/pages/index.hbs']
      }
    }
  }
});
```
</pre><p>Which renders to:</p><pre><code>grunt.<span class="call">initConfig</span>({
  assemble: {
    options: {
      assets: 'docs/assets',
      data: 'src/data/*.{json,yml}',
      helpers: 'src/custom-helpers.<span class="property">js</span>',
      partials: ['src/partials/**/*.{hbs,md}']
    },
    pages: {
      options: {
        layout: '<span class="keyword">default</span>.<span class="property">hbs</span>'
      },
      files: {
        './': ['src/templates/pages/index.<span class="property">hbs</span>']
      }
    }
  }
});
</code></pre><p>And this complicated HTML is an example of what might be generated by the markdown parser, when syntax highlighting is applied by a library like <a href="https://highlightjs.org/">highlight.js</a>:</p><pre><code>&lt;div <span class="keyword">class</span>=<span class="string">"highlight"</span>&gt;&lt;pre&gt;&lt;span <span class="keyword">class</span>=<span class="string">"nx"</span>&gt;grunt&lt;/span&gt;&lt;span <span class="keyword">class</span>=<span class="string">"p"</span>&gt;.&lt;/span&gt;&lt;span <span class="keyword">class</span>=<span class="string">"nx"</span>&gt;initConfig&lt;/span&gt;&lt;span <span class="keyword">class</span>=<span class="string">"p"</span>&gt;({&lt;/span&gt;
  &lt;span <span class="keyword">class</span>=<span class="string">"nx"</span>&gt;assemble&lt;/span&gt;&lt;span <span class="keyword">class</span>=<span class="string">"o"</span>&gt;:&lt;/span&gt; &lt;span <span class="keyword">class</span>=<span class="string">"p"</span>&gt;{&lt;/span&gt;
    &lt;span <span class="keyword">class</span>=<span class="string">"nx"</span>&gt;options&lt;/span&gt;&lt;span <span class="keyword">class</span>=<span class="string">"o"</span>&gt;:&lt;/span&gt; &lt;span <span class="keyword">class</span>=<span class="string">"p"</span>&gt;{&lt;/span&gt;
      &lt;span <span class="keyword">class</span>=<span class="string">"nx"</span>&gt;assets&lt;/span&gt;&lt;span <span class="keyword">class</span>=<span class="string">"o"</span>&gt;:&lt;/span&gt; &lt;span <span class="keyword">class</span>=<span class="string">"s1"</span>&gt;'docs/assets'&lt;/span&gt;&lt;span <span class="keyword">class</span>=<span class="string">"p"</span>&gt;,&lt;/span&gt;
      &lt;span <span class="keyword">class</span>=<span class="string">"nx"</span>&gt;data&lt;/span&gt;&lt;span <span class="keyword">class</span>=<span class="string">"o"</span>&gt;:&lt;/span&gt; &lt;span <span class="keyword">class</span>=<span class="string">"s1"</span>&gt;'src/data/*.{json,yml}'&lt;/span&gt;&lt;span <span class="keyword">class</span>=<span class="string">"p"</span>&gt;,&lt;/span&gt;
      &lt;span <span class="keyword">class</span>=<span class="string">"nx"</span>&gt;helpers&lt;/span&gt;&lt;span <span class="keyword">class</span>=<span class="string">"o"</span>&gt;:&lt;/span&gt; &lt;span <span class="keyword">class</span>=<span class="string">"s1"</span>&gt;'src/custom-helpers.<span class="property">js</span>'&lt;/span&gt;&lt;span <span class="keyword">class</span>=<span class="string">"p"</span>&gt;,&lt;/span&gt;
      &lt;span <span class="keyword">class</span>=<span class="string">"nx"</span>&gt;partials&lt;/span&gt;&lt;span <span class="keyword">class</span>=<span class="string">"o"</span>&gt;:&lt;/span&gt; &lt;span <span class="keyword">class</span>=<span class="string">"p"</span>&gt;[&lt;/span&gt;&lt;span <span class="keyword">class</span>=<span class="string">"s1"</span>&gt;'src/partials/**/*.{hbs,md}'&lt;/span&gt;&lt;span <span class="keyword">class</span>=<span class="string">"p"</span>&gt;]&lt;/span&gt;
    &lt;span <span class="keyword">class</span>=<span class="string">"p"</span>&gt;},&lt;/span&gt;
    &lt;span <span class="keyword">class</span>=<span class="string">"nx"</span>&gt;pages&lt;/span&gt;&lt;span <span class="keyword">class</span>=<span class="string">"o"</span>&gt;:&lt;/span&gt; &lt;span <span class="keyword">class</span>=<span class="string">"p"</span>&gt;{&lt;/span&gt;
      &lt;span <span class="keyword">class</span>=<span class="string">"nx"</span>&gt;options&lt;/span&gt;&lt;span <span class="keyword">class</span>=<span class="string">"o"</span>&gt;:&lt;/span&gt; &lt;span <span class="keyword">class</span>=<span class="string">"p"</span>&gt;{&lt;/span&gt;
        &lt;span <span class="keyword">class</span>=<span class="string">"nx"</span>&gt;layout&lt;/span&gt;&lt;span <span class="keyword">class</span>=<span class="string">"o"</span>&gt;:&lt;/span&gt; &lt;span <span class="keyword">class</span>=<span class="string">"s1"</span>&gt;'<span class="keyword">default</span>.<span class="property">hbs</span>'&lt;/span&gt;
      &lt;span <span class="keyword">class</span>=<span class="string">"p"</span>&gt;},&lt;/span&gt;
      &lt;span <span class="keyword">class</span>=<span class="string">"nx"</span>&gt;files&lt;/span&gt;&lt;span <span class="keyword">class</span>=<span class="string">"o"</span>&gt;:&lt;/span&gt; &lt;span <span class="keyword">class</span>=<span class="string">"p"</span>&gt;{&lt;/span&gt;
        &lt;span <span class="keyword">class</span>=<span class="string">"s1"</span>&gt;'./'&lt;/span&gt;&lt;span <span class="keyword">class</span>=<span class="string">"o"</span>&gt;:&lt;/span&gt; &lt;span <span class="keyword">class</span>=<span class="string">"p"</span>&gt;[&lt;/span&gt;&lt;span <span class="keyword">class</span>=<span class="string">"s1"</span>&gt;'src/templates/pages/index.<span class="property">hbs</span>'&lt;/span&gt;&lt;span <span class="keyword">class</span>=<span class="string">"p"</span>&gt;]&lt;/span&gt;
      &lt;span <span class="keyword">class</span>=<span class="string">"p"</span>&gt;}&lt;/span&gt;
    &lt;span <span class="keyword">class</span>=<span class="string">"p"</span>&gt;}&lt;/span&gt;
  &lt;span <span class="keyword">class</span>=<span class="string">"p"</span>&gt;}&lt;/span&gt;
&lt;span <span class="keyword">class</span>=<span class="string">"p"</span>&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</code></pre><h2>Links</h2><h3>Autolinks</h3><p>Not supported by roger.ml</p><h3>Inline links</h3><pre><code>[<span class="type">Assemble</span>](http://assemble.<span class="property">io</span>)
</code></pre><p>Renders to (hover over the link, there is no tooltip):</p><p><a href="http://assemble.io">Assemble</a></p><p>HTML:</p><pre><code>&lt;a href=<span class="string">"http://assemble.io"</span>&gt;<span class="type">Assemble</span>&lt;/a&gt;
</code></pre><h3>Link titles</h3><pre><code>[<span class="type">Assemble</span>](https://github.<span class="property">com</span>/assemble/ <span class="string">"Visit Assemble!"</span>)
</code></pre><p>Renders to (hover over the link, there should be a tooltip):</p><p><a href="https://github.com/assemble/ "Visit Assemble!"">Assemble</a></p><p>HTML:</p><pre><code>&lt;a href=<span class="string">"https://github.com/assemble/"</span> title=<span class="string">"Visit Assemble!"</span>&gt;<span class="type">Assemble</span>&lt;/a&gt;
</code></pre><h3>Named Anchors</h3><p>Named anchors enable you to jump to the specified anchor point on the same page.</p><p>For example, the following "chapter" links:</p><pre><code># <span class="type">Table</span> of <span class="type">Contents</span>
  * [<span class="type">Chapter</span> <span class="number">1</span>](#chapter-<span class="number">1</span>)
  * [<span class="type">Chapter</span> <span class="number">2</span>](#chapter-<span class="number">2</span>)
  * [<span class="type">Chapter</span> <span class="number">3</span>](#chapter-<span class="number">3</span>)
</code></pre><p>...will jump to these sections:</p><pre><code>## <span class="type">Chapter</span> <span class="number">1</span> &lt;a name=<span class="string">"chapter-1"</span>&gt;&lt;/a&gt;
<span class="type">Content</span> <span class="keyword">for</span> chapter one.

## <span class="type">Chapter</span> <span class="number">2</span> &lt;a name=<span class="string">"chapter-2"</span>&gt;&lt;/a&gt;
<span class="type">Content</span> <span class="keyword">for</span> chapter one.

## <span class="type">Chapter</span> <span class="number">3</span> &lt;a name=<span class="string">"chapter-3"</span>&gt;&lt;/a&gt;
<span class="type">Content</span> <span class="keyword">for</span> chapter one.
</code></pre><p><strong>Anchor placement</strong></p><p>Note that placement of achors is arbitrary, you can put them anywhere you want, not just in headings. This makes adding cross-references easy when writing markdown.</p><h2>Images</h2><p>Images have a similar syntax to links but include a preceding exclamation point.</p><pre><code>![<span class="type">Minion</span>](http://octodex.<span class="property">github</span>.<span class="property">com</span>/images/minion.<span class="property">png</span>)
</code></pre><img src="http://octodex.github.com/images/minion.png" alt="Minion"/><p>or</p><pre><code>![<span class="type">Alt</span> text](http://octodex.<span class="property">github</span>.<span class="property">com</span>/images/stormtroopocat.<span class="property">jpg</span> <span class="string">"The Stormtroopocat"</span>)
</code></pre><img src="http://octodex.github.com/images/stormtroopocat.jpg "The Stormtroopocat"" alt="Alt text"/><p>Like links, Images also have a footnote style syntax</p><pre><code>![<span class="type">Alt</span> text][id]
</code></pre><img src="http://octodex.github.com/images/dojocat.jpg  "The Dojocat"" alt="Alt text"/><p>With a reference later in the document defining the URL location:</p><pre><code>[id]: http://octodex.<span class="property">github</span>.<span class="property">com</span>/images/dojocat.<span class="property">jpg</span>  <span class="string">"The Dojocat"</span>
</code></pre><h2>Raw HTML</h2><p>Any text between <code>&lt;</code> and <code>&gt;</code> that looks like an HTML tag will be parsed as a raw HTML tag and rendered to HTML without escaping.</p><p><em>(Note that markdown parsers do not attempt to validate your HTML).</em></p><p>Example:</p><pre><code>**<span class="type">Visit</span> &lt;a href=<span class="string">"https://github.com"</span>&gt;<span class="type">Jon Schlinkert</span>'s <span class="type">GitHub Profile</span>&lt;/a&gt;.**
</code></pre><p>Renders to:</p><p><strong>Visit <a href="https://github.com">Jon Schlinkert's GitHub Profile</a>.</strong></p><h2>Escaping with backslashes</h2><p>Any ASCII punctuation character may be escaped using a single backslash.</p><p>Example:</p><pre><code>\*this <span class="keyword">is</span> not italic*
</code></pre><p>Renders to:</p><p>*this is not italic*</p><h1>Non-standard features</h1><p>The following markdown features are not defined by the <a href="">CommonMark</a> specification, but they are commonly supported by markdown parsers and editors, as well as sites like GitHub and GitLab.</p><h2>Strikethrough</h2><p>In GitHub Flavored Markdown (GFM) you can do strickthroughs.</p><pre><code>~~<span class="type">Strike</span> through this text.~~
</code></pre><p>Which renders to:</p><p><s>Strike through this text.</s></p><h3>Todo List</h3><pre><code>- [ ] <span class="type">Lorem</span> ipsum dolor sit amet
- [ ] <span class="type">Consectetur</span> adipiscing elit
- [x] <span class="type">Integer</span> molestie lorem at massa
</code></pre><p>Renders to:</p><ul><li>[ ] Lorem ipsum dolor sit amet</li><li>[ ] Consectetur adipiscing elit</li><li>[x] Integer molestie lorem at massa</li></ul><p><strong>Links in todo lists</strong></p><pre><code>- [ ] [foo](#bar)
- [ ] [baz](#qux)
- [x] [fez](#faz)
</code></pre><p>Renders to:</p><ul><li>[ ] <a href="#bar">foo</a></li><li>[ ] <a href="#qux">baz</a></li><li>[x] <a href="#faz">fez</a></li></ul><h2>Tables</h2><p>Tables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header <em>(this line of dashes is required)</em>.</p><ul><li>pipes do not need to be vertically aligned.</li><li>pipes on the left and right sides of the table are sometimes optional</li><li>three or more dashes must be used for each cell in the <em>separator</em> row (between the table header and body)</li><li>the left and right pipes are optional with some markdown parsers</li></ul><p>Example:</p><pre><code>| <span class="type">Option</span> | <span class="type">Description</span> |
| --- | --- |
| data   | path to data files to supply the data that will be passed into templates. |
| engine | engine to be used <span class="keyword">for</span> processing templates. <span class="type">Handlebars</span> <span class="keyword">is</span> the <span class="keyword">default</span>. |
| ext    | <span class="keyword">extension</span> to be used <span class="keyword">for</span> dest files. |
</code></pre><p>Renders to:</p><table><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>data</td><td>path to data files to supply the data that will be passed into templates.</td></tr><tr><td>engine</td><td>engine to be used for processing templates. Handlebars is the default.</td></tr><tr><td>ext</td><td>extension to be used for dest files.</td></tr></tbody></table><p>And this HTML:</p><pre><code>&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;<span class="type">Option</span>&lt;/th&gt;
    &lt;th&gt;<span class="type">Description</span>&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;data&lt;/td&gt;
    &lt;td&gt;path to data files to supply the data that will be passed into templates.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;engine&lt;/td&gt;
    &lt;td&gt;engine to be used <span class="keyword">for</span> processing templates. <span class="type">Handlebars</span> <span class="keyword">is</span> the <span class="keyword">default</span>.&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;ext&lt;/td&gt;
    &lt;td&gt;<span class="keyword">extension</span> to be used <span class="keyword">for</span> dest files.&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
</code></pre><h3>Aligning cells</h3><p><strong>Center text in a column</strong></p><p>To center the text in a column, add a colon to the middle of the dashes in the row beneath the header.</p><pre><code>| <span class="type">Option</span> | <span class="type">Description</span> |
| :--: | :--: |
| data   | path to data files to supply the data that will be passed into templates. |
| engine | engine to be used <span class="keyword">for</span> processing templates. <span class="type">Handlebars</span> <span class="keyword">is</span> the <span class="keyword">default</span>. |
| ext    | <span class="keyword">extension</span> to be used <span class="keyword">for</span> dest files. |
</code></pre><table><thead><tr><th align="center">Option</th><th align="center">Description</th></tr></thead><tbody><tr><td align="center">data</td><td align="center">path to data files to supply the data that will be passed into templates.</td></tr><tr><td align="center">engine</td><td align="center">engine to be used for processing templates. Handlebars is the default.</td></tr><tr><td align="center">ext</td><td align="center">extension to be used for dest files.</td></tr></tbody></table><p><strong>Right-align the text in a column</strong></p><p>To right-align the text in a column, add a colon to the middle of the dashes in the row beneath the header.</p><pre><code>| <span class="type">Option</span> | <span class="type">Description</span> |
| --: | --:|
| data   | path to data files to supply the data that will be passed into templates. |
| engine | engine to be used <span class="keyword">for</span> processing templates. <span class="type">Handlebars</span> <span class="keyword">is</span> the <span class="keyword">default</span>. |
| ext    | <span class="keyword">extension</span> to be used <span class="keyword">for</span> dest files. |
</code></pre><p>Renders to:</p><table><thead><tr><th align="right">Option</th><th align="right">Description</th></tr></thead><tbody><tr><td align="right">data</td><td align="right">path to data files to supply the data that will be passed into templates.</td></tr><tr><td align="right">engine</td><td align="right">engine to be used for processing templates. Handlebars is the default.</td></tr><tr><td align="right">ext</td><td align="right">extension to be used for dest files.</td></tr></tbody></table><h2>Footnotes</h2><blockquote><p>Markdown footnotes are not officially suppored by the <a href="">CommonMark</a> specification. However, the feature is supported by <a href="">remarkable</a> and other markdown parsers, and it's very useful when available.</p></blockquote><p>Markdown footnotes are denoted by an opening square bracket, followed by a caret, followed by a number and a closing square bracket: <code>[^1]</code>.</p><pre><code><span class="type">This</span> <span class="keyword">is some</span> text[^<span class="number">1</span>] with a footnote reference link.
</code></pre><p>The accompanying text for the footnote can be added elsewhere in the document using the following syntax:</p><pre><code>[^<span class="number">1</span>]: <span class="string">"This is a footnote"</span>
</code></pre><p>When rendered to HTML, footnotes are "stacked" by the markdown parser at the bottom of the file, in the order in which the footnotes were defined.</p><h3>Inline footnotes</h3><p>Some markdown parsers like <a href="https://github.com/jonschlinkert/remarkable">Remarkable</a> also support inline footnotes. Inline footnotes are written using the following syntax: <code>[^2 "This is an inline footnote"]</code>.</p><h2>Additional Information</h2><h3>What is markdown?</h3><blockquote><p>Markdown is "a plain text format for writing structured documents, based on formatting conventions from email and usenet" -- <a href="">CommonMark</a></p></blockquote><p>Sites like GitHub and Stackoverflow have popularized the use markdown as a plain-text alternative to traditional text editors, for writing things like documentation and comments.</p><h3>Other Resources</h3><ul><li><a href="https://ben.balter.com/2012/10/19/we-ve-been-trained-to-make-paper/">We've been trained to make paper</a> - A great blog post about why markdown frees us from the shackles of proprietary formats imposed by bloated word processors, such as Microsoft Word.</li><li><a href="https://commonmark.org/">CommonMark</a> - "A strongly defined, highly compatible specification of Markdown"</li></ul><h3>Contributing</h3><p>All contributions are welcome!</p><p>Please let me know if you find typos, grammar or spelling mistakes, or have a suggestion for improving the cheatsheet (since GitHub does not send notifications for gists, it might be better to contact me on twitter, at <a href="https://twitter.com/jonschlinkert">@jonschlinkert</a>).</p><p>Thanks for reading!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://roger.ml/posts/first-post</guid><title>"Hello, World!" Right?</title><description>This marks the first post written in this new website. Which means I'm finally migrating off of Medium. Hooray! 🎉</description><link>https://roger.ml/posts/first-post</link><pubDate>Sun, 28 Feb 2021 12:00:00 -0300</pubDate><content:encoded><![CDATA[<h1>"Hello, World!" Right?</h1><p>This marks the first post written in this new website. Which means I'm finally migrating off of Medium. Hooray! 🎉</p><p>"But why?" - you might ask. And it's a fair question. After all, why would anyone leave a free platform that makes publishing content so easy?</p><h2>Overall Look'n'Feel</h2><p>Medium is a writing platform made for everyone. But mostly write about programming topics, and Medium's UI isn't tailored for programming posts. Here I have full control over how the website will look like, how syntax highlighting will display different programming languages, I can format images any way I want, there's built-in dark mode support, etc - I get to choose how everything looks, and I can change it at any point in time.</p><p>In Medium, simply posting a multiline code snippet is cumbersome, since it has to first be uploaded to a GitHub gist.</p><h2>Content Ownership</h2><p>Here I own the data. No, really. Medium makes it easy for you import content into it, but exporting is painful. <a href="https://medium.com/@macropus/export-your-medium-posts-to-markdown-b5ccc8cb0050">There are some workarounds</a>, but I'd much rather own and store the content myself.</p><h2>Other Relevant Reasons</h2><p>There are <a href="https://www.reddit.com/r/Journalism/comments/8j7xly/why_do_people_love_to_hate_medium/">tons</a> <a href="https://yanngirard.typepad.com/yanns_blog/2015/10/why-you-shouldnt-blog-on-medium-.html">of</a> <a href="https://florimond.dev/blog/articles/2019/05/why-i-dont-write-on-medium/">articles</a> explaining why you shouldn't be blogging on Medium. I agree with most of them, specially as a developer. Worth checking those links.</p><h1>What Now?</h1><p>I'll migrate some of the Medium articles over to this website - only the relevant ones.</p><p>I might delete them from Medium after migrating them. This is because maintaining a copy of the content in two places is too costy. One way or another one of them gets auto of sync and starts causing issues.</p><p>You can follow me on Twitter (<a href="https://twitter.com/rogerluan_">@rogerluan_</a>) to be notified when a new post comes out here. Or you can subscribe to this website's RSS feed, if you're not on Twitter!</p><p>I'm looking forward to using this new <em>medium</em> (pun intended) to publish my content. 🥳</p>]]></content:encoded></item></channel></rss>
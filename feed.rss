<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Roger Oba</title><description>roger.ml hosts blog posts about miscellaneous topics, but mainly Swift programming, engineering, habits, and maybe a little bit of filosophy.</description><link>https://roger.ml</link><language>en</language><lastBuildDate>Thu, 25 Mar 2021 06:50:12 +0000</lastBuildDate><pubDate>Thu, 25 Mar 2021 06:50:12 +0000</pubDate><ttl>250</ttl><atom:link href="https://roger.ml/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://roger.ml/posts/xcode-version</guid><title>Automating Xcode version standardization across your team</title><description>Everyone in your team should be using the same dependencies versions. But is it possible to standardize the Xcode version too?</description><link>https://roger.ml/posts/xcode-version</link><pubDate>Thu, 25 Mar 2021 03:37:00 +0000</pubDate><content:encoded><![CDATA[<h1>Automating Xcode version standardization across your team</h1><img src="https://roger.ml/images/posts/xcode-version/dependencies.png" alt="Dependencies"/><p>At some point during your research on software development methodologies, you might stumble upon the <a href="https://12factor.net/">The Twelve-Factor App</a> methodology. For those who don't know, this is a methodology for building high-quality software-as-a-service. It's intended to target any programming language and any application developer, but since it can be somewhat abstract, when we bring its concepts to the iOS context, sometimes we lack real world examples.</p><p>That's what motivated the creation of <a href="https://ios-factor.com">iOS factor</a>, written by <a href="https://twitter.com/KrauseFx">@KrauseFx</a>. You can read more about it on his blog post <a href="https://krausefx.com/blog/ios-factor">iOS-factor: A methodology for building high-quality iOS apps</a>.</p><h2>Explicitly declare and isolate dependencies</h2><p>One of the concepts of the twelve-factor methodology (or, one of the 'factors') is on how to manage dependencies of your project.</p><p>The benefit of having dependency versions explicitly declared is to have 100% reproducible environments, even after months or years. You're able to checkout on a git tag 4 years back, knowing that the build will succeed just like it used to do back then.<br><br>You already declare your Swift version in your Xcode project settings, or in a <code>Package.swift</code> or <code>.swift-version</code> file. If you use <a href="https://bundler.io"><code>bundler</code></a> to manage your gems (and you should), your gems such as fastlane are explicitly declared in your <code>Gemfile</code>, and your <code>Gemfile.lock</code> declares the exact versions installed. Your Ruby version can be declared by a <code>.ruby-version</code> file and Ruby version managers such as <code>rbenv</code> and <code>rvm</code> will automatically pick it up. But when it comes to Xcode, there's no industry standard, really.</p><p>This necessity inspired the creation of <code>.xcode-version</code>, a file analogous to <code>.ruby-version</code>, but that defines the Xcode version that should be used in a given environment.</p><p>This is not an 'official thing', so there's a more properly documented proposal you can find <a href="https://github.com/rogerluan/xcode-install/blob/document-xcode-version/XCODE_VERSION.md">here</a>.</p><h2>Hands on</h2><h3>Adoption</h3><p>So if this file is not an industry standard yet, can we actually use this anywhere?</p><p>Yes! The popular <a href="https://github.com/xcpretty/xcode-install">xcode-install</a> gem that installs and updates Xcode versions via CLI actually reads this file already, if defined. It's not officially documented yet, but <a href="https://github.com/xcpretty/xcode-install/pull/424">xcpretty/xcode-install#424</a> should take care of that.</p><h3>The hook</h3><p>To adopt the usage of a dependency version lookup in your development environment, you will need a hook in your workflow to check whether the right version of the dependency is running, and, in case it's not running the right version, install the right one.</p><p>With Xcode it's no different. But we can't run this within Xcode (e.g. in a Run Script) not only because this check doesn't need to happen on every build, but also because it makes no sense for Xcode to potentially trigger an Xcode installation. üòÖ</p><img src="https://roger.ml/images/posts/xcode-version/inception.jpeg" alt="Inception"/><p>What projects usually have is an environment setup script that every developer has to run before getting started with development. This usually comes in the form of a <a href="https://opensource.com/article/18/8/what-how-makefile">Makefile</a> where developers simply call <code>make</code> to install the project dependencies, or sometimes a custom bash script. Regardless of how your team does it, I think this is a suitable hook for your Xcode version validation step.</p><p>Go ahead and create your <code>.xcode-version</code> file and place it at the same level as your <code>.xcodeproj</code> or <code>.xcworkspace</code> file (usually at the root of your project). This file should contain just a string declaring the Xcode version you'd like to use. Assuming your team should be running Xcode 12.4, ou can create this file by running:</p><pre><code>$ echo -n <span class="string">"12.4"</span> &gt; .<span class="dotAccess">xcode</span>-version
</code></pre><p>Next, you need to make sure your team has <code>xcode-install</code> gem installed. Again, I recommend declaring this in your <code>Gemfile</code>, in a <code>bundler</code>-powered environment. Then, in your hook, add this line:</p><pre><code>bundle exec xcversion install        
</code></pre><p>With this command, if the currently installed Xcode version doesn't match the one declared in the version file, it will proceed to the installation. Otherwise, it will print a nice and brief:</p><blockquote><p>Version 12.4 already installed.</p></blockquote><h2>Where to go from here</h2><p>I couldn't recommend more revisiting all your project dependencies, and making sure all of them are being declared explicitly.</p><p>Other than declaring the Xcode version, some common mistakes include not using <a href="https://bundler.io"><code>bundler</code></a> to manage Ruby gems, and using the native macOS Ruby version instead of one managed by a Ruby version manager. In case you missed it, Ruby (and other scripting languages) actually won't be included in macOS by default in future versions of macOS <a href="https://developer.apple.com/documentation/macos-release-notes/macos-catalina-10_15-release-notes">according to Apple</a>.</p><p>If you liked this article, if you spotted mistakes in it, or if you just want to say hi, ping me <a href="https://twitter.com/rogerluan_">@rogerluan_</a> ü§ó</p>]]></content:encoded></item><item><guid isPermaLink="true">https://roger.ml/posts/first-post</guid><title>‚ÄúHello, New Blog!‚Äù</title><description>This marks the first post hosted here. Which means I'm finally migrating off of Medium. Hooray! üéâ</description><link>https://roger.ml/posts/first-post</link><pubDate>Sun, 28 Feb 2021 12:00:00 +0000</pubDate><content:encoded><![CDATA[<h1>‚ÄúHello, New Blog!‚Äù</h1><img src="https://roger.ml/images/posts/first-post/my-first-post-swiftui.png" alt="My First Post"/><p>This marks the first post hosted here. Which means I'm finally migrating off of Medium. Hooray! üéâ</p><p>‚ÄúBut why?‚Äù - you might ask. And it's a fair question. After all, why would anyone leave a free platform that makes publishing content so easy?</p><h2>Overall Look'n'Feel</h2><p>Medium is a writing platform made for everyone. It democratized access to a blogging platform. However, I write mostly about programming topics, and Medium's UI isn't tailored for programming posts. Here I have full control over how the website will look like, how syntax highlighting will display different programming languages, I can format images any way I want, change the website theme, etc - I get to choose how everything looks. And I can change it at any point in time.</p><p>On Medium, simply posting a multiline code snippet is cumbersome, since it has to first be uploaded to a GitHub gist, embeded content displays awfully, and there's not even support to markdown. üò™</p><h2>Content Ownership</h2><p>Here I own the data. No, really. Medium makes it easy for you import content into it, but exporting is painful. <a href="https://medium.com/@macropus/export-your-medium-posts-to-markdown-b5ccc8cb0050">There are some workarounds</a>, but I'd much rather own and store the content myself. Not to mention that by storing it on a git-based system, I get free versioning, and I can even enable a code reviewing process if I like, which would alone be a huge advantage over pretty much any other blogging platform.</p><h2>Other Miscellaneous Reasons</h2><p>Yann Girard <a href="https://yanngirard.typepad.com/yanns_blog/2015/10/why-you-shouldnt-blog-on-medium-.html">mentions</a> many other reasons to dislike Medium. Brand dilution, low click-throughs, extremely high competition, to mention a few.</p><p>There's also the fact that Medium's recommendation algorithm strongly favors paid articles as opposed to free ones, and this completely defeats the purpose of what I look forward to, when blogging. I want the information to flow freely and dissiminate within the community of developers, travelers, or whatever target audience I'm writing to. The goal was never earn money by putting the information behind a pay wall.</p><p>Also, I don't know much about SEO yet, but I can imagine that having full control over SEO metadata might also greatly improve your blog's appearance on search engines. I'll definitely learn more about this in the upcoming months.</p><h1>So, What Now?</h1><p>In the end, given my purposes as a writer, the type of content I write, aesthetics and other minor reasons, a generic blogging platform doesn't fit my needs anymore.</p><p>I might migrate some of the articles from Medium, over to this website. At least the ones I still like, and that are still relevant.</p><p>I might delete them from Medium after migrating them. Maintaining a copy of the content in two places is too costly, time-wise. One way or another one of them gets auto of sync and starts causing issues.</p><p>You can follow me on Twitter (<a href="https://twitter.com/rogerluan_">@rogerluan_</a>) to be notified when a new post comes out here. Or you can subscribe to this website's RSS feed, if you're not on Twitter!</p><p>I'm looking forward to using this new <em>medium</em> (pun intended) to publish my content. ü•≥</p>]]></content:encoded></item></channel></rss>